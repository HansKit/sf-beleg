/*
 * generated by Xtext 2.35.0
 */
package de.htwdd.sf.beleg.s83765s83768.serializer;

import com.google.inject.Inject;
import de.htwdd.sf.beleg.s83765s83768.dsl.Benefit;
import de.htwdd.sf.beleg.s83765s83768.dsl.DslPackage;
import de.htwdd.sf.beleg.s83765s83768.dsl.Model;
import de.htwdd.sf.beleg.s83765s83768.dsl.Role;
import de.htwdd.sf.beleg.s83765s83768.dsl.Story;
import de.htwdd.sf.beleg.s83765s83768.dsl.Title;
import de.htwdd.sf.beleg.s83765s83768.services.DslGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class DslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private DslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == DslPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case DslPackage.ACTION:
				sequence_Action(context, (de.htwdd.sf.beleg.s83765s83768.dsl.Action) semanticObject); 
				return; 
			case DslPackage.BENEFIT:
				sequence_Benefit(context, (Benefit) semanticObject); 
				return; 
			case DslPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case DslPackage.ROLE:
				sequence_Role(context, (Role) semanticObject); 
				return; 
			case DslPackage.STORY:
				sequence_Story(context, (Story) semanticObject); 
				return; 
			case DslPackage.TITLE:
				sequence_Title(context, (Title) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     Action returns Action
	 *
	 * Constraint:
	 *     (noun=NOMEN vi=VERB_INFINITIV)
	 * </pre>
	 */
	protected void sequence_Action(ISerializationContext context, de.htwdd.sf.beleg.s83765s83768.dsl.Action semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.ACTION__NOUN) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.ACTION__NOUN));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.ACTION__VI) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.ACTION__VI));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getActionAccess().getNounNOMENTerminalRuleCall_0_0(), semanticObject.getNoun());
		feeder.accept(grammarAccess.getActionAccess().getViVERB_INFINITIVTerminalRuleCall_1_0(), semanticObject.getVi());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Benefit returns Benefit
	 *
	 * Constraint:
	 *     (noun=NOMEN pzvi=PREFIX_ZU_VERB_INFINITIV)
	 * </pre>
	 */
	protected void sequence_Benefit(ISerializationContext context, Benefit semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.BENEFIT__NOUN) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.BENEFIT__NOUN));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.BENEFIT__PZVI) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.BENEFIT__PZVI));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBenefitAccess().getNounNOMENTerminalRuleCall_0_0(), semanticObject.getNoun());
		feeder.accept(grammarAccess.getBenefitAccess().getPzviPREFIX_ZU_VERB_INFINITIVTerminalRuleCall_1_0(), semanticObject.getPzvi());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     stories+=Story+
	 * </pre>
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Role returns Role
	 *
	 * Constraint:
	 *     noun=NOMEN
	 * </pre>
	 */
	protected void sequence_Role(ISerializationContext context, Role semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.ROLE__NOUN) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.ROLE__NOUN));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRoleAccess().getNounNOMENTerminalRuleCall_0(), semanticObject.getNoun());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Story returns Story
	 *
	 * Constraint:
	 *     (title=Title dp=DOPPELPUNKT benefit=Benefit role=Role action=Action)
	 * </pre>
	 */
	protected void sequence_Story(ISerializationContext context, Story semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.STORY__TITLE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.STORY__TITLE));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.STORY__DP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.STORY__DP));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.STORY__BENEFIT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.STORY__BENEFIT));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.STORY__ROLE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.STORY__ROLE));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.STORY__ACTION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.STORY__ACTION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getStoryAccess().getTitleTitleParserRuleCall_0_0(), semanticObject.getTitle());
		feeder.accept(grammarAccess.getStoryAccess().getDpDOPPELPUNKTTerminalRuleCall_1_0(), semanticObject.getDp());
		feeder.accept(grammarAccess.getStoryAccess().getBenefitBenefitParserRuleCall_3_0(), semanticObject.getBenefit());
		feeder.accept(grammarAccess.getStoryAccess().getRoleRoleParserRuleCall_7_0(), semanticObject.getRole());
		feeder.accept(grammarAccess.getStoryAccess().getActionActionParserRuleCall_8_0(), semanticObject.getAction());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Title returns Title
	 *
	 * Constraint:
	 *     (noun=NOMEN verb=VERB_INFINITIV)
	 * </pre>
	 */
	protected void sequence_Title(ISerializationContext context, Title semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.TITLE__NOUN) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.TITLE__NOUN));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.TITLE__VERB) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.TITLE__VERB));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTitleAccess().getNounNOMENTerminalRuleCall_0_0(), semanticObject.getNoun());
		feeder.accept(grammarAccess.getTitleAccess().getVerbVERB_INFINITIVTerminalRuleCall_1_0(), semanticObject.getVerb());
		feeder.finish();
	}
	
	
}
