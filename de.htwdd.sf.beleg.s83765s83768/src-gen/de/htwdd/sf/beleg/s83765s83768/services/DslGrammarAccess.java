/*
 * generated by Xtext 2.35.0
 */
package de.htwdd.sf.beleg.s83765s83768.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class DslGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.htwdd.sf.beleg.s83765s83768.Dsl.Model");
		private final Assignment cStoriesAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cStoriesStoryParserRuleCall_0 = (RuleCall)cStoriesAssignment.eContents().get(0);
		
		//Model:
		//    stories+=Story*;
		@Override public ParserRule getRule() { return rule; }
		
		//stories+=Story*
		public Assignment getStoriesAssignment() { return cStoriesAssignment; }
		
		//Story
		public RuleCall getStoriesStoryParserRuleCall_0() { return cStoriesStoryParserRuleCall_0; }
	}
	public class StoryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.htwdd.sf.beleg.s83765s83768.Dsl.Story");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTitleAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTitleTitleParserRuleCall_0_0 = (RuleCall)cTitleAssignment_0.eContents().get(0);
		private final Assignment cDpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDpDOPPELPUNKTTerminalRuleCall_1_0 = (RuleCall)cDpAssignment_1.eContents().get(0);
		private final Keyword cUmKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cBenefitAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBenefitBenefitParserRuleCall_3_0 = (RuleCall)cBenefitAssignment_3.eContents().get(0);
		private final Keyword cMöchteKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cIchKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cAlsKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cRoleAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cRoleRoleParserRuleCall_7_0 = (RuleCall)cRoleAssignment_7.eContents().get(0);
		private final Assignment cActionAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cActionActionParserRuleCall_8_0 = (RuleCall)cActionAssignment_8.eContents().get(0);
		private final Keyword cFullStopKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//Story:
		//    title=Title dp=DOPPELPUNKT 'Um' benefit=Benefit 'möchte' 'ich' 'als' role=Role action=Action '.';
		@Override public ParserRule getRule() { return rule; }
		
		//title=Title dp=DOPPELPUNKT 'Um' benefit=Benefit 'möchte' 'ich' 'als' role=Role action=Action '.'
		public Group getGroup() { return cGroup; }
		
		//title=Title
		public Assignment getTitleAssignment_0() { return cTitleAssignment_0; }
		
		//Title
		public RuleCall getTitleTitleParserRuleCall_0_0() { return cTitleTitleParserRuleCall_0_0; }
		
		//dp=DOPPELPUNKT
		public Assignment getDpAssignment_1() { return cDpAssignment_1; }
		
		//DOPPELPUNKT
		public RuleCall getDpDOPPELPUNKTTerminalRuleCall_1_0() { return cDpDOPPELPUNKTTerminalRuleCall_1_0; }
		
		//'Um'
		public Keyword getUmKeyword_2() { return cUmKeyword_2; }
		
		//benefit=Benefit
		public Assignment getBenefitAssignment_3() { return cBenefitAssignment_3; }
		
		//Benefit
		public RuleCall getBenefitBenefitParserRuleCall_3_0() { return cBenefitBenefitParserRuleCall_3_0; }
		
		//'möchte'
		public Keyword getMöchteKeyword_4() { return cMöchteKeyword_4; }
		
		//'ich'
		public Keyword getIchKeyword_5() { return cIchKeyword_5; }
		
		//'als'
		public Keyword getAlsKeyword_6() { return cAlsKeyword_6; }
		
		//role=Role
		public Assignment getRoleAssignment_7() { return cRoleAssignment_7; }
		
		//Role
		public RuleCall getRoleRoleParserRuleCall_7_0() { return cRoleRoleParserRuleCall_7_0; }
		
		//action=Action
		public Assignment getActionAssignment_8() { return cActionAssignment_8; }
		
		//Action
		public RuleCall getActionActionParserRuleCall_8_0() { return cActionActionParserRuleCall_8_0; }
		
		//'.'
		public Keyword getFullStopKeyword_9() { return cFullStopKeyword_9; }
	}
	public class TitleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.htwdd.sf.beleg.s83765s83768.Dsl.Title");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNounAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNounNOUNTerminalRuleCall_0_0 = (RuleCall)cNounAssignment_0.eContents().get(0);
		private final Assignment cVerbAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVerbVERB_INFINTIVTerminalRuleCall_1_0 = (RuleCall)cVerbAssignment_1.eContents().get(0);
		
		//Title:noun=NOUN verb=VERB_INFINTIV;
		@Override public ParserRule getRule() { return rule; }
		
		//noun=NOUN verb=VERB_INFINTIV
		public Group getGroup() { return cGroup; }
		
		//noun=NOUN
		public Assignment getNounAssignment_0() { return cNounAssignment_0; }
		
		//NOUN
		public RuleCall getNounNOUNTerminalRuleCall_0_0() { return cNounNOUNTerminalRuleCall_0_0; }
		
		//verb=VERB_INFINTIV
		public Assignment getVerbAssignment_1() { return cVerbAssignment_1; }
		
		//VERB_INFINTIV
		public RuleCall getVerbVERB_INFINTIVTerminalRuleCall_1_0() { return cVerbVERB_INFINTIVTerminalRuleCall_1_0; }
	}
	public class BenefitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.htwdd.sf.beleg.s83765s83768.Dsl.Benefit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNounAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNounNOUNTerminalRuleCall_0_0 = (RuleCall)cNounAssignment_0.eContents().get(0);
		private final Assignment cPzviAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPzviPREFIX_ZU_VERB_INFINTIVTerminalRuleCall_1_0 = (RuleCall)cPzviAssignment_1.eContents().get(0);
		
		//Benefit:noun=NOUN pzvi=PREFIX_ZU_VERB_INFINTIV;
		@Override public ParserRule getRule() { return rule; }
		
		//noun=NOUN pzvi=PREFIX_ZU_VERB_INFINTIV
		public Group getGroup() { return cGroup; }
		
		//noun=NOUN
		public Assignment getNounAssignment_0() { return cNounAssignment_0; }
		
		//NOUN
		public RuleCall getNounNOUNTerminalRuleCall_0_0() { return cNounNOUNTerminalRuleCall_0_0; }
		
		//pzvi=PREFIX_ZU_VERB_INFINTIV
		public Assignment getPzviAssignment_1() { return cPzviAssignment_1; }
		
		//PREFIX_ZU_VERB_INFINTIV
		public RuleCall getPzviPREFIX_ZU_VERB_INFINTIVTerminalRuleCall_1_0() { return cPzviPREFIX_ZU_VERB_INFINTIVTerminalRuleCall_1_0; }
	}
	public class RoleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.htwdd.sf.beleg.s83765s83768.Dsl.Role");
		private final Assignment cNounAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNounNOUNTerminalRuleCall_0 = (RuleCall)cNounAssignment.eContents().get(0);
		
		//Role: noun=NOUN;
		@Override public ParserRule getRule() { return rule; }
		
		//noun=NOUN
		public Assignment getNounAssignment() { return cNounAssignment; }
		
		//NOUN
		public RuleCall getNounNOUNTerminalRuleCall_0() { return cNounNOUNTerminalRuleCall_0; }
	}
	public class ActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.htwdd.sf.beleg.s83765s83768.Dsl.Action");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNounAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNounNOUNTerminalRuleCall_0_0 = (RuleCall)cNounAssignment_0.eContents().get(0);
		private final Assignment cViAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cViVERB_INFINTIVTerminalRuleCall_1_0 = (RuleCall)cViAssignment_1.eContents().get(0);
		
		//Action: noun=NOUN vi=VERB_INFINTIV;
		@Override public ParserRule getRule() { return rule; }
		
		//noun=NOUN vi=VERB_INFINTIV
		public Group getGroup() { return cGroup; }
		
		//noun=NOUN
		public Assignment getNounAssignment_0() { return cNounAssignment_0; }
		
		//NOUN
		public RuleCall getNounNOUNTerminalRuleCall_0_0() { return cNounNOUNTerminalRuleCall_0_0; }
		
		//vi=VERB_INFINTIV
		public Assignment getViAssignment_1() { return cViAssignment_1; }
		
		//VERB_INFINTIV
		public RuleCall getViVERB_INFINTIVTerminalRuleCall_1_0() { return cViVERB_INFINTIVTerminalRuleCall_1_0; }
	}
	
	
	private final ModelElements pModel;
	private final StoryElements pStory;
	private final TitleElements pTitle;
	private final BenefitElements pBenefit;
	private final RoleElements pRole;
	private final ActionElements pAction;
	private final TerminalRule tNOUN;
	private final TerminalRule tPREFIX_ZU_VERB_INFINTIV;
	private final TerminalRule tVERB_INFINTIV;
	private final TerminalRule tDOPPELPUNKT;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public DslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pStory = new StoryElements();
		this.pTitle = new TitleElements();
		this.pBenefit = new BenefitElements();
		this.pRole = new RoleElements();
		this.pAction = new ActionElements();
		this.tNOUN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.htwdd.sf.beleg.s83765s83768.Dsl.NOUN");
		this.tPREFIX_ZU_VERB_INFINTIV = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.htwdd.sf.beleg.s83765s83768.Dsl.PREFIX_ZU_VERB_INFINTIV");
		this.tVERB_INFINTIV = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.htwdd.sf.beleg.s83765s83768.Dsl.VERB_INFINTIV");
		this.tDOPPELPUNKT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.htwdd.sf.beleg.s83765s83768.Dsl.DOPPELPUNKT");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.htwdd.sf.beleg.s83765s83768.Dsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//    stories+=Story*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Story:
	//    title=Title dp=DOPPELPUNKT 'Um' benefit=Benefit 'möchte' 'ich' 'als' role=Role action=Action '.';
	public StoryElements getStoryAccess() {
		return pStory;
	}
	
	public ParserRule getStoryRule() {
		return getStoryAccess().getRule();
	}
	
	//Title:noun=NOUN verb=VERB_INFINTIV;
	public TitleElements getTitleAccess() {
		return pTitle;
	}
	
	public ParserRule getTitleRule() {
		return getTitleAccess().getRule();
	}
	
	//Benefit:noun=NOUN pzvi=PREFIX_ZU_VERB_INFINTIV;
	public BenefitElements getBenefitAccess() {
		return pBenefit;
	}
	
	public ParserRule getBenefitRule() {
		return getBenefitAccess().getRule();
	}
	
	//Role: noun=NOUN;
	public RoleElements getRoleAccess() {
		return pRole;
	}
	
	public ParserRule getRoleRule() {
		return getRoleAccess().getRule();
	}
	
	//Action: noun=NOUN vi=VERB_INFINTIV;
	public ActionElements getActionAccess() {
		return pAction;
	}
	
	public ParserRule getActionRule() {
		return getActionAccess().getRule();
	}
	
	//terminal NOUN: ('A'..'Z' | 'Ä' | 'Ö' | 'Ü')('a'..'z' | 'ä' | 'ö' | 'ü')*;
	public TerminalRule getNOUNRule() {
		return tNOUN;
	}
	
	//terminal PREFIX_ZU_VERB_INFINTIV: ('a'..'z' | 'ä' | 'ö' | 'ü')* 'zu' ('a'..'y' | 'ä' | 'ö' | 'ü' | ('z' ('a'..'t' | 'v'..'y' | 'ä' | 'ö' | 'ü')))* 'en' ',';
	public TerminalRule getPREFIX_ZU_VERB_INFINTIVRule() {
		return tPREFIX_ZU_VERB_INFINTIV;
	}
	
	//terminal VERB_INFINTIV: ('a'..'y' | 'ä' | 'ö' | 'ü' | ('z' ('a'..'t' | 'v'..'y' | 'ä' | 'ö' | 'ü')))+ ('z')* 'en';
	public TerminalRule getVERB_INFINTIVRule() {
		return tVERB_INFINTIV;
	}
	
	//                                //wenn zwei regeln mit 'en' enden, weiß er nicht welche er nehmen soll
	//terminal DOPPELPUNKT: ':';
	public TerminalRule getDOPPELPUNKTRule() {
		return tDOPPELPUNKT;
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
