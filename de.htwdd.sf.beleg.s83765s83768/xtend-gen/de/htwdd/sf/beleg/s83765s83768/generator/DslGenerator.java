/**
 * generated by Xtext 2.35.0
 */
package de.htwdd.sf.beleg.s83765s83768.generator;

import de.htwdd.sf.beleg.s83765s83768.dsl.Model;
import de.htwdd.sf.beleg.s83765s83768.dsl.Story;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;

@SuppressWarnings("all")
public class DslGenerator extends AbstractGenerator {
  private String indentBy(int count, String string) {
    String indentString = "    ";
    return indentString.repeat(count) + string;
  }

  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    final Model model = (Model) resource.getContents().get(0);
    StringConcatenation builder = new StringConcatenation();
    builder.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
    builder.newLine();
    builder.append("<stories>");
    builder.newLine();
    {
      for(final Story story : model.getStories()) {
        String titleNoun = story.getTitle().getNoun();
        String titleVerb = story.getTitle().getVerb();
        String titleContent = titleNoun + " " + titleVerb;
        String benefitNoun = story.getBenefit().getNoun();
        String benefitVerb = story.getBenefit().getPzvi();
        String benefitVerbInfinitive = benefitVerb.startsWith("zu")
                ? benefitVerb.replaceFirst("zu", "$")
                .replace("zu", "")
                .replaceFirst("$", "zu")
                : benefitVerb.replace("zu", "");
        String benefitContent = benefitNoun + " " + benefitVerbInfinitive.replace(",", "");
        String roleContent = story.getRole().getNoun();
        String actionNoun = story.getAction().getNoun();
        String actionVerb = story.getAction().getVi();
        String actionContent = actionNoun + " " + actionVerb;
        builder.append(indentBy(1, "<story>"));
        builder.newLine();
        builder.append(indentBy(2, "<title>"));
        builder.append(titleContent);
        builder.append("</title>");
        builder.newLineIfNotEmpty();
        builder.append(indentBy(2, "<benefit>"));
        builder.append(benefitContent);
        builder.append("</benefit>");
        builder.newLineIfNotEmpty();
        builder.append(indentBy(2, "<role>"));
        builder.append(roleContent);
        builder.append("</role>");
        builder.newLineIfNotEmpty();
        builder.append(indentBy(2, "<action>"));
        builder.append(actionContent);
        builder.append("</action>");
        builder.newLineIfNotEmpty();
        builder.append(indentBy(1, "</story>"));
        builder.newLine();
      }
    }
    builder.append("</stories>");
    builder.newLine();
    final String xmlContent = builder.toString();
    fsa.generateFile("s83765s83768.xml", xmlContent);
  }
}
