/*
 * generated by Xtext 2.35.0
 */
package de.htwdd.sf.beleg.s83765s83768.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import de.htwdd.sf.beleg.s83765s83768.ide.contentassist.antlr.internal.InternalDslParser;
import de.htwdd.sf.beleg.s83765s83768.services.DslGrammarAccess;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class DslParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(DslGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, DslGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getStoryAccess().getGroup(), "rule__Story__Group__0");
			builder.put(grammarAccess.getTitleAccess().getGroup(), "rule__Title__Group__0");
			builder.put(grammarAccess.getBenefitAccess().getGroup(), "rule__Benefit__Group__0");
			builder.put(grammarAccess.getActionAccess().getGroup(), "rule__Action__Group__0");
			builder.put(grammarAccess.getModelAccess().getStoriesAssignment(), "rule__Model__StoriesAssignment");
			builder.put(grammarAccess.getStoryAccess().getTitleAssignment_0(), "rule__Story__TitleAssignment_0");
			builder.put(grammarAccess.getStoryAccess().getDpAssignment_1(), "rule__Story__DpAssignment_1");
			builder.put(grammarAccess.getStoryAccess().getBenefitAssignment_3(), "rule__Story__BenefitAssignment_3");
			builder.put(grammarAccess.getStoryAccess().getRoleAssignment_7(), "rule__Story__RoleAssignment_7");
			builder.put(grammarAccess.getStoryAccess().getActionAssignment_8(), "rule__Story__ActionAssignment_8");
			builder.put(grammarAccess.getTitleAccess().getNounAssignment_0(), "rule__Title__NounAssignment_0");
			builder.put(grammarAccess.getTitleAccess().getVerbAssignment_1(), "rule__Title__VerbAssignment_1");
			builder.put(grammarAccess.getBenefitAccess().getNounAssignment_0(), "rule__Benefit__NounAssignment_0");
			builder.put(grammarAccess.getBenefitAccess().getPzviAssignment_1(), "rule__Benefit__PzviAssignment_1");
			builder.put(grammarAccess.getRoleAccess().getNounAssignment(), "rule__Role__NounAssignment");
			builder.put(grammarAccess.getActionAccess().getNounAssignment_0(), "rule__Action__NounAssignment_0");
			builder.put(grammarAccess.getActionAccess().getViAssignment_1(), "rule__Action__ViAssignment_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private DslGrammarAccess grammarAccess;

	@Override
	protected InternalDslParser createParser() {
		InternalDslParser result = new InternalDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public DslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(DslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
